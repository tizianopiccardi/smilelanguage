/* This file was generated by SableCC (http://www.sablecc.org/). */

package smile.node;

import smile.analysis.*;

@SuppressWarnings("nls")
public final class AWhileStmt extends PStmt
{
    private TWhileint _start_;
    private PStmtlist _stmtlist_;
    private TWhileend _end_;

    public AWhileStmt()
    {
        // Constructor
    }

    public AWhileStmt(
        @SuppressWarnings("hiding") TWhileint _start_,
        @SuppressWarnings("hiding") PStmtlist _stmtlist_,
        @SuppressWarnings("hiding") TWhileend _end_)
    {
        // Constructor
        setStart(_start_);

        setStmtlist(_stmtlist_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AWhileStmt(
            cloneNode(this._start_),
            cloneNode(this._stmtlist_),
            cloneNode(this._end_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileStmt(this);
    }

    public TWhileint getStart()
    {
        return this._start_;
    }

    public void setStart(TWhileint node)
    {
        if(this._start_ != null)
        {
            this._start_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._start_ = node;
    }

    public PStmtlist getStmtlist()
    {
        return this._stmtlist_;
    }

    public void setStmtlist(PStmtlist node)
    {
        if(this._stmtlist_ != null)
        {
            this._stmtlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtlist_ = node;
    }

    public TWhileend getEnd()
    {
        return this._end_;
    }

    public void setEnd(TWhileend node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._start_)
            + toString(this._stmtlist_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._start_ == child)
        {
            this._start_ = null;
            return;
        }

        if(this._stmtlist_ == child)
        {
            this._stmtlist_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._start_ == oldChild)
        {
            setStart((TWhileint) newChild);
            return;
        }

        if(this._stmtlist_ == oldChild)
        {
            setStmtlist((PStmtlist) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TWhileend) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
