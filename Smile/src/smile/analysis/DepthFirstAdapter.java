/* This file was generated by SableCC (http://www.sablecc.org/). */

package smile.analysis;

import java.util.*;
import smile.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStmtlist().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStmtlist(AStmtlist node)
    {
        defaultIn(node);
    }

    public void outAStmtlist(AStmtlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtlist(AStmtlist node)
    {
        inAStmtlist(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtlist() != null)
        {
            node.getStmtlist().apply(this);
        }
        outAStmtlist(node);
    }

    public void inAEmptyStmtlist(AEmptyStmtlist node)
    {
        defaultIn(node);
    }

    public void outAEmptyStmtlist(AEmptyStmtlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStmtlist(AEmptyStmtlist node)
    {
        inAEmptyStmtlist(node);
        outAEmptyStmtlist(node);
    }

    public void inANextindexStmt(ANextindexStmt node)
    {
        defaultIn(node);
    }

    public void outANextindexStmt(ANextindexStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextindexStmt(ANextindexStmt node)
    {
        inANextindexStmt(node);
        if(node.getNextindex() != null)
        {
            node.getNextindex().apply(this);
        }
        outANextindexStmt(node);
    }

    public void inAPrevindexStmt(APrevindexStmt node)
    {
        defaultIn(node);
    }

    public void outAPrevindexStmt(APrevindexStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrevindexStmt(APrevindexStmt node)
    {
        inAPrevindexStmt(node);
        if(node.getPrevindex() != null)
        {
            node.getPrevindex().apply(this);
        }
        outAPrevindexStmt(node);
    }

    public void inAIncStmt(AIncStmt node)
    {
        defaultIn(node);
    }

    public void outAIncStmt(AIncStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncStmt(AIncStmt node)
    {
        inAIncStmt(node);
        if(node.getInc() != null)
        {
            node.getInc().apply(this);
        }
        outAIncStmt(node);
    }

    public void inADecStmt(ADecStmt node)
    {
        defaultIn(node);
    }

    public void outADecStmt(ADecStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecStmt(ADecStmt node)
    {
        inADecStmt(node);
        if(node.getDec() != null)
        {
            node.getDec().apply(this);
        }
        outADecStmt(node);
    }

    public void inAPrintStmt(APrintStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintStmt(APrintStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStmt(APrintStmt node)
    {
        inAPrintStmt(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintStmt(node);
    }

    public void inAPrintcharStmt(APrintcharStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintcharStmt(APrintcharStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintcharStmt(APrintcharStmt node)
    {
        inAPrintcharStmt(node);
        if(node.getPrintchar() != null)
        {
            node.getPrintchar().apply(this);
        }
        outAPrintcharStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getStart() != null)
        {
            node.getStart().apply(this);
        }
        if(node.getStmtlist() != null)
        {
            node.getStmtlist().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getStmtlist() != null)
        {
            node.getStmtlist().apply(this);
        }
        if(node.getEndif() != null)
        {
            node.getEndif().apply(this);
        }
        outAIfStmt(node);
    }
}
